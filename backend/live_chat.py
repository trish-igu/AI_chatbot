#!/usr/bin/env python3
"""
Live Chat Interface for testing the enhanced multi-agent system.
This allows you to have real conversations with the chatbot as the test user.
"""

import asyncio
import aiohttp
import json
import uuid
from datetime import datetime
import sys

# API Configuration
BASE_URL = "http://localhost:8000"
# Note: The actual user ID will be generated by the backend server

class LiveChatInterface:
    def __init__(self):
        self.session = None
        self.conversation_id = None
        self.user_id = None  # Will be set by the backend
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def start_new_conversation(self, message: str):
        """Start a new conversation."""
        print(f"👤 You: {message}")
        
        payload = {
            "conversation_id": None,
            "message": message
        }
        
        async with self.session.post(
            f"{BASE_URL}/api/ai/chat",
            json=payload,
            headers={"Content-Type": "application/json"}
        ) as response:
            if response.status == 200:
                data = await response.json()
                self.conversation_id = data["conversation_id"]
                print(f"🤖 Mindy: {data['response']}")
                return data
            else:
                error_text = await response.text()
                print(f"❌ Error: {response.status} - {error_text}")
                return None
    
    async def continue_conversation(self, message: str):
        """Continue existing conversation."""
        print(f"👤 You: {message}")
        
        payload = {
            "conversation_id": self.conversation_id,
            "message": message
        }
        
        async with self.session.post(
            f"{BASE_URL}/api/ai/chat",
            json=payload,
            headers={"Content-Type": "application/json"}
        ) as response:
            if response.status == 200:
                data = await response.json()
                print(f"🤖 Mindy: {data['response']}")
                return data
            else:
                error_text = await response.text()
                print(f"❌ Error: {response.status} - {error_text}")
                return None
    
    async def check_inactivity_status(self):
        """Check your inactivity status."""
        async with self.session.get(
            f"{BASE_URL}/api/user/inactivity-status"
        ) as response:
            if response.status == 200:
                data = await response.json()
                print(f"\n📊 Your Status:")
                print(f"   ⏰ Last Message: {data['last_message_time']}")
                print(f"   😴 Inactive: {data['is_inactive']}")
                print(f"   ⏱️  Duration: {data['inactivity_duration_minutes']:.1f} minutes")
                print(f"   💬 Active Conversations: {data['active_conversations']}")
                print(f"   📝 To Summarize: {data['conversations_to_summarize']}")
                return data
            return None
    
    async def trigger_summarization(self):
        """Trigger summarization of your conversations."""
        async with self.session.post(
            f"{BASE_URL}/api/user/summarize-inactive"
        ) as response:
            if response.status == 200:
                data = await response.json()
                print(f"\n✅ {data['message']}")
                return data
            return None
    
    async def get_conversation_history(self):
        """Get your conversation history."""
        if not self.conversation_id:
            print("❌ No active conversation")
            return
        
        async with self.session.get(
            f"{BASE_URL}/api/conversations/{self.conversation_id}"
        ) as response:
            if response.status == 200:
                data = await response.json()
                conv = data['conversation']
                print(f"\n📊 Current Conversation:")
                print(f"   🆔 ID: {conv['conversation_id']}")
                print(f"   📝 Title: {conv['title']}")
                print(f"   📊 Status: {conv['status']}")
                print(f"   📝 Summary: {'Yes' if conv['conversation_summary'] else 'No'}")
                print(f"   💬 Messages: {len(data['messages'])}")
                return data
            return None

async def live_chat_session():
    """Start a live chat session."""
    print("🚀 Live Chat with Enhanced Multi-Agent System")
    print("=" * 60)
    print("👤 You are the test user (ID will be generated by the backend)")
    print("🤖 Chat with Mindy, your AI mental health assistant")
    print("=" * 60)
    print("💡 Commands:")
    print("   /status - Check your inactivity status")
    print("   /summarize - Trigger summarization")
    print("   /history - View conversation history")
    print("   /new - Start new conversation")
    print("   /quit - Exit chat")
    print("=" * 60)
    
    async with LiveChatInterface() as chat:
        print("\n🗣️  Start chatting! Type your first message:")
        
        while True:
            try:
                # Get user input
                user_input = input("\n👤 You: ").strip()
                
                # Handle commands
                if user_input.lower() == '/quit':
                    print("\n👋 Goodbye! Thanks for testing the system!")
                    break
                elif user_input.lower() == '/status':
                    await chat.check_inactivity_status()
                    continue
                elif user_input.lower() == '/summarize':
                    await chat.trigger_summarization()
                    continue
                elif user_input.lower() == '/history':
                    await chat.get_conversation_history()
                    continue
                elif user_input.lower() == '/new':
                    chat.conversation_id = None
                    print("🆕 Starting new conversation...")
                    continue
                elif user_input.lower() == '/help':
                    print("\n💡 Commands:")
                    print("   /status - Check your inactivity status")
                    print("   /summarize - Trigger summarization")
                    print("   /history - View conversation history")
                    print("   /new - Start new conversation")
                    print("   /quit - Exit chat")
                    continue
                elif not user_input:
                    continue
                
                # Send message to chatbot
                if chat.conversation_id:
                    await chat.continue_conversation(user_input)
                else:
                    await chat.start_new_conversation(user_input)
                    
            except KeyboardInterrupt:
                print("\n\n👋 Chat interrupted. Goodbye!")
                break
            except Exception as e:
                print(f"\n❌ Error: {e}")
                print("💡 Make sure the backend server is running on http://localhost:8000")

async def test_conversation_flow():
    """Test a specific conversation flow."""
    print("🧪 Testing Conversation Flow")
    print("=" * 60)
    
    async with LiveChatInterface() as chat:
        # First conversation
        print("\n🗣️  First Conversation:")
        await chat.start_new_conversation("Hi, I've been feeling really stressed lately with work and my relationships.")
        await chat.continue_conversation("I can't sleep well and feel anxious all the time.")
        await chat.continue_conversation("I've tried some breathing exercises but they only help temporarily.")
        
        # Check status
        print("\n📊 Checking Status:")
        await chat.check_inactivity_status()
        
        # Trigger summarization (simulate 15 minutes)
        print("\n⏰ Triggering Summarization:")
        await chat.trigger_summarization()
        
        # Start second conversation
        print("\n🗣️  Second Conversation (Should use context):")
        chat.conversation_id = None
        await chat.start_new_conversation("Hi again! I wanted to follow up on our previous conversation about my stress and sleep issues.")
        await chat.continue_conversation("I've been practicing the techniques we discussed, and I'm seeing some improvement.")
        
        print("\n✅ Test completed!")

if __name__ == "__main__":
    print("🧪 Live Chat Interface for Enhanced Multi-Agent System")
    print("=" * 70)
    print("📋 Prerequisites:")
    print("   1. Backend server running on http://localhost:8000")
    print("   2. Database properly configured")
    print("   3. Azure OpenAI credentials set up")
    print("=" * 70)
    
    try:
        # Check if user wants to run test or live chat
        choice = input("\nChoose mode:\n1. Live Chat (interactive)\n2. Test Flow (automated)\nEnter choice (1 or 2): ").strip()
        
        if choice == "1":
            asyncio.run(live_chat_session())
        elif choice == "2":
            asyncio.run(test_conversation_flow())
        else:
            print("❌ Invalid choice. Starting live chat...")
            asyncio.run(live_chat_session())
            
    except KeyboardInterrupt:
        print("\n⏹️  Exiting...")
    except Exception as e:
        print(f"\n❌ Error: {e}")
        print("💡 Make sure the backend server is running!")
