#!/usr/bin/env python3
"""
Web-based Live Chat Interface using Streamlit.
This provides a beautiful web interface for testing the enhanced multi-agent system.
"""

import streamlit as st
import asyncio
import aiohttp
import json
import uuid
from datetime import datetime
import time

# API Configuration
BASE_URL = "http://localhost:8000"

class WebChatInterface:
    def __init__(self):
        self.session = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def send_message(self, message: str, conversation_id: str = None):
        """Send a message to the chatbot."""
        payload = {
            "conversation_id": conversation_id,
            "message": message
        }
        
        async with self.session.post(
            f"{BASE_URL}/api/ai/chat",
            json=payload,
            headers={"Content-Type": "application/json"}
        ) as response:
            if response.status == 200:
                data = await response.json()
                return data
            else:
                error_text = await response.text()
                return {"error": f"Error {response.status}: {error_text}"}
    
    async def get_inactivity_status(self):
        """Get user inactivity status."""
        async with self.session.get(f"{BASE_URL}/api/user/inactivity-status") as response:
            if response.status == 200:
                return await response.json()
            return None
    
    async def trigger_summarization(self):
        """Trigger summarization."""
        async with self.session.post(f"{BASE_URL}/api/user/summarize-inactive") as response:
            if response.status == 200:
                return await response.json()
            return None

def run_web_chat():
    """Run the web chat interface."""
    st.set_page_config(
        page_title="Live Chat with Mindy",
        page_icon="🤖",
        layout="wide"
    )
    
    st.title("🤖 Live Chat with Mindy")
    st.subheader("Enhanced Multi-Agent Mental Health Assistant")
    
    # Initialize session state
    if "conversation_id" not in st.session_state:
        st.session_state.conversation_id = None
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "session" not in st.session_state:
        st.session_state.session = None
    
    # Sidebar for controls
    with st.sidebar:
        st.header("🎛️ Controls")
        
        if st.button("🆕 New Conversation"):
            st.session_state.conversation_id = None
            st.session_state.messages = []
            st.rerun()
        
        if st.button("📊 Check Status"):
            asyncio.run(check_status())
        
        if st.button("⏰ Trigger Summarization"):
            asyncio.run(trigger_summarization())
        
        st.header("ℹ️ Info")
        st.write("**User ID:** Generated by backend")
        st.write("**Features:**")
        st.write("• Personalized greetings")
        st.write("• Cumulative context")
        st.write("• Status management")
        st.write("• HIPAA compliance")
    
    # Main chat interface
    st.header("💬 Chat")
    
    # Display messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.write(message["content"])
    
    # Chat input
    if prompt := st.chat_input("Type your message here..."):
        # Add user message
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Display user message
        with st.chat_message("user"):
            st.write(prompt)
        
        # Get AI response
        with st.chat_message("assistant"):
            with st.spinner("Mindy is thinking..."):
                response = asyncio.run(get_ai_response(prompt))
                
                if "error" in response:
                    st.error(response["error"])
                else:
                    st.write(response["response"])
                    st.session_state.conversation_id = response["conversation_id"]
                    st.session_state.messages.append({
                        "role": "assistant", 
                        "content": response["response"]
                    })

async def get_ai_response(message: str):
    """Get AI response for a message."""
    async with WebChatInterface() as chat:
        return await chat.send_message(message, st.session_state.conversation_id)

async def check_status():
    """Check user inactivity status."""
    async with WebChatInterface() as chat:
        status = await chat.get_inactivity_status()
        if status:
            st.sidebar.success(f"Status: {'Inactive' if status['is_inactive'] else 'Active'}")
            st.sidebar.write(f"Last message: {status['last_message_time']}")
            st.sidebar.write(f"Active conversations: {status['active_conversations']}")
        else:
            st.sidebar.error("Failed to get status")

async def trigger_summarization():
    """Trigger summarization."""
    async with WebChatInterface() as chat:
        result = await chat.trigger_summarization()
        if result:
            st.sidebar.success(result["message"])
        else:
            st.sidebar.error("Failed to trigger summarization")

if __name__ == "__main__":
    run_web_chat()
